#+PROPERTY: header-args:emacs-lisp :tangle /home/juanpablo/.emacs :results silent
#+STARTUP: overview

* Ideas
** TODO filter/sort buffers  per "app"
** TODO manage better the "C-x <-" behavior (guessing buffer you wanna go)
** TODO leave anchors you can quickly move to (like C-x C-x)->see registers
** DONE save history
* Base Config
** Package Management
#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

#+begin_src emacs-lisp

  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'load-path "/home/juanpablo/.emacs.d/site-lisp/")
  (add-to-list 'load-path "/home/juanpablo/.guix-profile/share/emacs/site-lisp/")
  (let ((default-directory (expand-file-name "~/.emacs.d/site-lisp/")))
    (normal-top-level-add-subdirs-to-load-path))
  (package-initialize)
  (require 's)
  (require 'use-package)
  (use-package guix
    :config
    (with-eval-after-load 'guix-repl
      (setq guix-guile-program  '("guix" "repl")
      	  guix-config-scheme-compiled-directory  nil
      	  guix-repl-use-latest  nil
      	  guix-repl-use-server  nil))
    (setq guix-ask-before-buffer-update nil)
    )
  (use-package use-package-ensure-guix
    :custom
    (use-package-ensure-function #'use-package-ensure-guix) 

    (use-package-ensure-guix-profile "/home/juanpablo/.guix-profile")

    )

  (setq  use-package-always-ensure t)
#+end_src
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
  	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  	  (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	    (url-retrieve-synchronously
  	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  	     'silent 'inhibit-cookies)
  	  (goto-char (point-max))
  	  (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
#+end_src
** UI
*** Font
#+begin_src emacs-lisp
(use-package fontaine)

  (setq fontaine-presets
        '((tiny
           :default-family "Iosevka Comfy Wide Fixed"
           :default-height 70)
          (small
           :default-family "Iosevka Comfy Fixed"
           :default-height 90)
          (regular
           :default-height 100)
          (medium
           :default-height 110)
          (large
           :default-weight semilight
           :default-height 140
           :bold-weight extrabold)
          (presentation
           :default-weight semilight
           :default-height 170
           :bold-weight extrabold)
          (t
           ;; I keep all properties for didactic purposes, but most can be
           ;; omitted.  See the fontaine manual for the technicalities:
           ;; <https://protesilaos.com/emacs/fontaine>.
           :default-family "Iosevka Comfy"
           :default-weight regular
           :default-height 100
           :fixed-pitch-family nil ; falls back to :default-family
           :fixed-pitch-weight nil ; falls back to :default-weight
           :fixed-pitch-height 1.0
           :variable-pitch-family "Iosevka Comfy Duo"
           :variable-pitch-weight nil
           :variable-pitch-height 1.0
           :bold-family nil ; use whatever the underlying face has
           :bold-weight bold
           :italic-family nil
           :italic-slant italic
           :line-spacing nil)))

#+end_src
*** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-palenight t))

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

#+RESULTS:

*** Tweaks
 #+begin_src emacs-lisp
 (setq inhibit-startup-message t)

 (scroll-bar-mode -1)        ; Disable visible scrollbar
 (tool-bar-mode -1)          ; Disable the toolbar
 (tooltip-mode -1)           ; Disable tooltips
 (set-fringe-mode 10)        ; Give some breathing room

 (menu-bar-mode -1)            ; Disable the menu bar

 ;; Set up the visible bell
 (setq visible-bell t)

 (column-number-mode)
 (global-display-line-numbers-mode t)

 ;; Set frame transparency
 (set-frame-parameter (selected-frame) 'alpha 95)
 (add-to-list 'default-frame-alist `(alpha . ,95))

 ;; Disable line numbers for some modes
 (dolist (mode '(org-mode-hook
                 term-mode-hook
                 shell-mode-hook
                 treemacs-mode-hook
                 eshell-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
 #+end_src

*** Dashboard
#+begin_src emacs-lisp
  (use-package page-break-lines)

  (use-package dashboard 
    :init      
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner `logo) 
    (setq dashboard-center-content t)
    (setq dashboard-set-navigator t)
    (setq dashboard-page-separator  "\n\f\n")
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 5)
                            (projects . 3)))
    :config
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))

  ;; (defun my/initial-window-buffer-setup ()
  ;;   (switch-to-buffer-other-window "*scratch*")
  ;;   (switch-to-buffer-other-window "*dashboard*")
  ;; )
#+end_src
*** Disable Bell
#+begin_src emacs-lisp
;;Avoid having noisy sounds when scrolling to the bottom of a buffer
(defun my-bell-function ()
  (unless (memq this-command
		'(isearch-abort abort-recursive-edit exit-minibuffer
				keyboard-quit mwheel-scroll down up next-line previous-line
				backward-char forward-char))
    (ding)))
(setq ring-bell-function 'my-bell-function)
(setq ring-bell-function 'ignore)
#+end_src

** Tweaks
*** Clean Folders

#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering
    :init
     (setq no-littering-etc-directory
	(expand-file-name "config/" user-emacs-directory))
     (setq no-littering-var-directory
	   (expand-file-name "data/" user-emacs-directory))
    )

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
  ;; )
#+end_src
*** LSP optimization settings
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
#+end_src
* Lisp
** Macros

#+begin_src emacs-lisp
(defmacro my/general-define-key (args)
  `(progn ,@(mapcar (lambda (arglist)
		      `(general-def ,@arglist :package 'general))
		    args)))
(use-package s)
(defmacro f-string (fmt)
  "Like `s-format' but with format fields in it.
FMT is a string to be expanded against the current lexical
environment. It is like what is used in `s-lex-format', but has
an expanded syntax to allow format-strings. For example:
${user-full-name 20s} will be expanded to the current value of
the variable `user-full-name' in a field 20 characters wide.
  (let ((f (sqrt 5)))  (f-string \"${f 1.2f}\"))
  will render as: 2.24
This function is inspired by the f-strings in Python 3.6, which I
enjoy using a lot.
"
  (let* ((matches (s-match-strings-all"${\\(?3:\\(?1:[^} ]+\\) *\\(?2:[^}]*\\)\\)}" fmt))
         (agetter (cl-loop for (m0 m1 m2 m3) in matches
                        collect `(cons ,m3  (format (format "%%%s" (if (string= ,m2 "")
                                                                      (if s-lex-value-as-lisp "S" "s")
                                                                   ,m2))
                                                  (symbol-value (intern ,m1)))))))

    `(s-format ,fmt 'aget (list ,@agetter))))
#+end_src
** Guix porting

** Functions
#+begin_src emacs-lisp
  (defun my/load-default-init-file ()
    (interactive)
    (load-file "~/.emacs")
  )

  (defun my/stop-emacs-server ()
    (interactive)
    (eshell-command "ps aux | grep 'emacs --daemon' | awk  '{print $2}' | xargs kill -9")
    )

  (defun my/insert-functions-in-scratch-buffer (str)
    (let
      ((l (apropos str)))
      (dolist (x l)
        (with-current-buffer
            "*scratch*"
          (progn
            (insert "\n")
            (insert (symbol-name (car x)))
            )
          )
        )
      )
    )

  (defun my/swiper-isearch-dwim ()
      (interactive)
      ;; Are we using multiple cursors?
      (cond ((and (boundp 'multiple-cursors-mode)
                  multiple-cursors-mode
                  (fboundp  'phi-search))
             (call-interactively 'phi-search))
            ;; Are we defining a macro?
            (defining-kbd-macro
              (call-interactively 'swiper-isearch))
            ;; Fall back to swiper.
            (t
             ;; Wrap around swiper results.
             (let ((ivy-wrap t))
               ;; If region is active, prepopulate swiper's search term.
               (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
                   (let ((region (buffer-substring-no-properties (mark) (point))))
                     (deactivate-mark)
                     (swiper-isearch region))
                 (swiper-isearch))))))

    (defun my/swiper-isearch-backward-dwim ()
      (interactive)
      ;; Are we using multiple cursors?
      (cond ((and (boundp 'multiple-cursors-mode)
                  multiple-cursors-mode
                  (fboundp  'phi-search-backward))
             (call-interactively 'phi-search-backward))
            ;; Are we defining a macro?
            (defining-kbd-macro
              (call-interactively 'isearch-backward))
            ;; Fall back to swiper.
            (t
             ;; Wrap around swiper results.
             (let ((ivy-wrap t))
               ;; If region is active, prepopulate swiper's search term.
               (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
                   (let ((region (buffer-substring-no-properties (mark) (point))))
                     (deactivate-mark)
                     (swiper-isearch-backward region))
                 (swiper-isearch-backward))))))
#+end_src

#+RESULTS:
: my/insert-functions-in-scratch-buffer

*** Remote Jupyter tools
#+begin_src emacs-lisp
(defun execute-command-remote (remote path command)
  (setq full-command (f-string "cd /ssh:${remote}:${path};${command}"))
  (eshell-command full-command)
  )

(defun open-toretto-jupyter ()
  (interactive)
  (setq toretto "juanpablo@192.168.200.222")
  (setq jp-folder "/home/juanpablo/team-ds/jp/")
  (setq launch-jupyter-docker "bash run_jupyter_jp.sh")
  (setq jupyter-port "9018")
  (execute-command-remote toretto jp-folder launch-jupyter-docker)
  (eshell-command (f-string "ssh -N -f -L localhost:${jupyter-port}:localhost:${jupyter-port} ${toretto}"))
  (ein:notebooklist-login "9018" nil)
  (switch-to-buffer (f-string "*ein:notebooklist http://127.0.0.1:${jupyter-port}*"))
  )

(defun open-gpu-jupyter ()
  (interactive)
  (setq toretto "kwali@3.224.192.108")
  (setq jp-folder "/home/kwali/pytorch_models/")
  (setq launch-jupyter-docker "bash run_jupyter_jp.sh")
  (setq jupyter-port "9018")
  (execute-command-remote toretto jp-folder launch-jupyter-docker)
  (eshell-command (f-string "ssh -N -f -L localhost:${jupyter-port}:localhost:${jupyter-port} ${toretto}"))
  (ein:notebooklist-login "9018" nil)
  (switch-to-buffer (f-string "*ein:notebooklist http://127.0.0.1:${jupyter-port}*"))
  )
#+end_src

#+RESULTS:
: open-gpu-jupyter

* Keybindings
** General
#+begin_src emacs-lisp

  ;; Emacs oriented keybinding. Do good, not evil!
  ;; An interesting link for this is
  ;; https://yiufung.net/post/emacs-key-binding-conventions-and-why-you-should-try-it/

  (use-package general
    :config
    (my/general-define-key
     (("M-w" 'easy-kill
       "C-@" 'er/expand-region
       "C-s" 'my/swiper-isearch-dwim
       "M-s" 'swiper
       "C-M-s" 'avy-goto-char
       "C-x o" 'other-window
       "M-o" 'ace-window 
       "C-x C-b" 'persp-counsel-switch-buffer
       ;; "C-x x" 'persp-mode-prefix-key
       )
      ("C-c w" 'hydra-window/body
       "C-c p" 'projectile-command-map
       ;; "C-c b" 'my/eaf-open-browser	
       ;; "C-c B" 'hydra-browser/body
       "C-c e" 'elfeed
       "C-c y w" 'aya-create
       "C-c y y" 'aya-expand
       "C-c y l" 'ivy-yasnippet
       "C-c y s" 'aya-persist-snippet
       "C->" 'mc/mark-next-like-this
       "C-<" 'mc/mark-previous-like-this
       "C-c C->" 'mc/mark-all-like-this
       "C-S-c C-S-c" 'mc/edit-lines
       )
      (lsp-mode-map
       "C-c l u r" 'lsp-ui-peek-find-references
       "C-c l u d" 'lsp-ui-peek-find-definitions
       "C-c l u g" 'lsp-ui-doc-glance
       "C-c l u f" 'lsp-ui-doc-focus-frame
       "C-c l u m" 'lsp-ui-imenu
       "C-c l u t" 'lsp-treemacs-symbols
       )
      (python-mode-map
       "C-M-b" 'python-nav-backward-block
       "C-M-f" 'python-nav-forward-block
       "C-M-a" 'python-nav-backward-defun
       "C-M-e" 'python-nav-forward-defun
       "C-M-u" 'python-nav-up-list
       "\r" 'newline-and-indent
       )
      (minibuffer-local-map
       "C-r" 'counsel-minibuffer-history)

       (dired-mode-map
              "C-o" 'casual-dired-tmenu
              "s" 'casual-dired-sort-by-tmenu
              "/" 'casual-dired-search-replace-tmenu)

            (Info-mode-map 
              "C-o" 'casual-info-tmenu)

            (bookmark-bmenu-mode-map
              "C-o" 'casual-bookmarks-tmenu
              "S" 'casual-bookmarks-sortby-tmenu
              "J" 'bookmark-jump)

            (reb-mode-map 
              "C-o" 'casual-re-builder-tmenu)

            
  )))
#+end_src

#+RESULTS:
: t

** Hydras
*** Window
#+begin_src emacs-lisp
      (use-package hydra)
      (use-package pretty-hydra)
      (use-package windmove
	:straight t)
      (use-package transpose-frame)
      (use-package headlong
	:straight t)
      (winner-mode 1)

      ;;shameleslly taken from abo-abo's init files
      ;; (pretty-hydra-define hydra-window (:foreign-keys warn :quit-key "q")
      ;; ("Arrange"
      ;;  (("v" (lambda ()
      ;;          (interactive)
      ;;          (split-window-right)
      ;;          (windmove-right))
      ;;        "vert")
      ;;   ("x" (lambda ()
      ;;          (interactive)
      ;;          (split-window-below)
      ;;          (windmove-down))
      ;;        "horz")
      ;;  ("d" ace-delete-window "del")
      ;;  ("o" delete-other-windows "one" :exit t)
      ;;  ("s" ace-swap-window "swap") 
      ;;  ("t" transpose-frame "transpose" :exit t)
      ;;  ("+" balance-windows "balance")
      ;;  ("u" (progn (winner-undo) (setq this-command 'winner-undo)) "undo"))
      ;;  "Move"
      ;;  (("h" windmove-left nil)
      ;;   ("j" windmove-down nil)
      ;;   ("k" windmove-up nil)
      ;;   ("l" windmove-right nil)
      ;;   ("a" ace-window "ace")
      ;;   ("i" ace-maximize-window "ace-one" :exit t)
      ;;   ("b" ido-switch-buffer "buf")
      ;;   ("m" headlong-bookmark-jump "bmk"))
      ;;   )
      ;; )
#+end_src

#+RESULTS:
: hydra-window/body
*** EAF
#+begin_src emacs-lisp 
  ;; More of a mnemonic hydra than a cluster of keys to be chained like aya keybinds for example.
  ;; (pretty-hydra-define hydra-browser (:foreign-keys warn :quit-key "q")
  ;; ("Go to"
  ;;  (("o" eaf-py-proxy-insert_or_open_browser "open")
  ;;   ("t" eaf-py-proxy-insert_or_new_blank_page "tab")
  ;;   ("T" eaf-py-proxy-insert_or_recover_prev_close_page "recover"))
  ;;  "Move"
  ;;  (("j" eaf-py-proxy-insert_or_scroll_up nil)
  ;;   ("k" eaf-py-proxy-insert_or_scroll_down nil)
  ;;   ("h" eaf-py-proxy-insert_or_scroll_left nil)
  ;;   ("l" eaf-py-proxy-insert_or_scroll_right nil)
  ;;   ("H" eaf-py-proxy-insert_or_history_backward nil)
  ;;   ("L" eaf-py-proxy-insert_or_history_forward nil)
  ;;   ("J" eaf-py-proxy-insert_or_select_left_tab nil)
  ;;   ("K" eaf-py-proxy-insert_or_select_right_tab nil)
  ;;   ("O" eaf-py-proxy-insert_or_open_link_new_buffer_other_window nil)
  ;;   ("i" eaf-py-proxy-insert_or_focus_input "input")
  ;;   ("e" eaf-py-proxy-insert_or_edit_url "edit-url")
  ;;   ("r" eaf-py-proxy-insert_or_refresh_ "refresh")
  ;;   ("f" eaf-py-proxy-insert_or_open_link "link")
  ;;   ("F" eaf-py-proxy-insert_or_open_link_new_buffer "link-newbuf"))
  ;;  "Actions"
  ;;  (("a" eaf-py-proxy-atomic_edit "atomic")
  ;;   ("s" eaf-py-proxy-save_page_password "save-password")
  ;;   ("p" eaf-py-proxy-toggle_password_autofill "insert-password")
  ;;   ("," eaf-py-proxy-insert_or_switch_to_reader_mode "reader-mode")
  ;;   (";" eaf-py-proxy-insert_or_translate_page "translate")
  ;;   ("m" eaf-py-proxy-insert_or_toggle_device "tgl-device"))
  ;;  "Open"
  ;;  (("d" eaf-py-proxy-insert_or_open_downloads_setting "dwlds")
  ;;   ("D"  eaf-py-proxy-open_devtools "dev-tools")
  ;;   ("y"    eaf-py-proxy-insert_or_download_youtube_video "yt-dl"))
  ;;  "Visuals"
  ;;  (("0" eaf-py-proxy-insert_or_zoom_reset "reset")
  ;;   ("-" eaf-py-proxy-zoom_out "out")
  ;;   ("=" eaf-py-proxy-zoom_in "in")
  ;;   ("3" eaf-py-proxy-insert_or_save_as_screenshot "scrshot"))
  ;;   )
  ;; )

#+end_src

#+RESULTS:
: hydra-browser/body

M-e atomic edit
C-t toggle password autofill
C-d save page password
; translate page
, reader mode

Caret mode usual keys

"c" eaf-py-proxy-insert_or_caret_at_line
"v" eaf-py-proxy-caret_toggle_mark
"w" eaf-py-proxy-caret_next_word
"M-w" eaf-py-proxy-copy_text
<escape>   eaf-py-proxy-caret_exit

To be added

()

** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1)
)
#+end_src

#+RESULTS:
: t

* Discoverability
** Ivy
*** Basics and Counsel

 #+begin_src emacs-lisp
   (use-package ivy
     :diminish
     :config
     (ivy-mode 1))

   (use-package counsel
     :custom
     (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
     :config
     (counsel-mode 1))

   (use-package ivy-rich
     :after ivy
     :init
     (ivy-rich-mode 1)
     (setq ivy-rich-parse-remote-buffer nil))

   (use-package counsel-tramp)

 #+end_src

 #+RESULTS:
 : t

*** Prescient

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :straight t
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (setq ivy-prescient-sort-commands '(:not swiper swiper-isearch counsel-yank-pop counsel-find-file counsel-recentf counsel-descbinds))
    (ivy-prescient-mode 1))
#+end_src

#+RESULTS:
: t
** Workspaces

#+begin_src emacs-lisp
  (defun my/startup-window-layout ()
    (split-window-horizontally)
    (other-window 1)
    (split-window-below)
    (other-window 2)
    )

  (defun my/config-startup-perspective ()
    (persp-switch "project")
    (my/startup-window-layout)
    (switch-to-buffer "*dashboard*")
    (other-window 1)
    (shell (generate-new-buffer-name "*shell*"))
    (other-window 1)
    (switch-to-buffer "*scratch* (project)")
    )

  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-c x"))
    :init
    (persp-mode 1)
    ;; (my/config-startup-perspective)
    )

  (use-package burly)
#+end_src

#+RESULTS:
: t

** Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :init
    (setq projectile-project-search-path '("~/" "~/work/kwali/"))
    :config
    (defun my/switch-project-action ()
      (persp-switch (projectile-project-name))
      )
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action #'my/switch-project-action)
    (projectile-mode)
  )
#+end_src

#+RESULTS:
:
** Casual
#+begin_src emacs-lisp

    (use-package re-builder
      :straight t
      :defer t)

  (use-package casual-lib
      :straight (casual-lib :type git :host github :repo "kickingvegas/casual-lib")
      :after (re-builder))  

    (use-package casual-re-builder
      :straight (casual-re-builder :type git :host github :repo "kickingvegas/casual-re-builder")
      :after (re-builder))

    (use-package  casual-dired
      :straight (casual-dired :type git :host github :repo "kickingvegas/casual-dired"))

    (use-package casual-info
      :straight (casual-info :type git :host github :repo "kickingvegas/casual-info"))

    (use-package casual-bookmarks
      :straight (casual-bookmarks :type git :host github :repo "kickingvegas/casual-bookmarks"))
#+end_src
* Editing
** Avy
#+begin_src emacs-lisp
(use-package avy)
#+end_src

** Ace Window
#+begin_src emacs-lisp
(use-package ace-window)
#+end_src

** Expand

#+begin_src emacs-lisp
(use-package expand-region)
(use-package easy-kill)
#+end_src

#+RESULTS:

** Multiple cursors
#+begin_src emacs-lisp
  (use-package phi-search)
  (use-package multiple-cursors)  
#+end_src

#+RESULTS:

** Ediff
#+begin_src emacs-lisp
  (defmacro csetq (variable value)
    `(funcall (or (get ',variable 'custom-set)
                  'set-default)
              ',variable ,value))

  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)

  (defun ora-ediff-hook ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map "j" 'ediff-next-difference)
    (define-key ediff-mode-map "k" 'ediff-previous-difference))

  (add-hook 'ediff-mode-hook 'ora-ediff-hook)

  (winner-mode)
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)


#+end_src
* Tramp
#+begin_src emacs-lisp
  (with-eval-after-load 'tramp
    (add-to-list 'tramp-methods
                 '("sshxa"
                   (tramp-login-program "ssh")
                   (tramp-login-args
                    (("-l" "%u")
                     ("-p" "%p")
                     ("%c")
                     ("-e" "none")
                     ("-t" "-t")
                     ("-o" "RemoteCommand=\"%l\"")
                     ("-A")
                     ("%h")))
                   (tramp-async-args
                    (("-q")))
  		 (tramp-remote-shell         "/bin/sh")
                   (tramp-remote-shell-login
                    ("-l"))
                   (tramp-remote-shell-args
                    ("-c")))
                 )
    (tramp-set-completion-function "sshxa" tramp-completion-function-alist-ssh))

  (use-package docker-tramp)
  
  (defun my/find-package-path (package-name)
    "Find the installation path of a given PACKAGE-NAME."
    (let ((package-desc (cadr (assq package-name package-alist))))
      (if package-desc
  	(package-desc-dir package-desc)
        (message "Package '%s' not found!" package-name))))

#+end_src

#+RESULTS:
: remote-shell
* Org

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
  
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
  ;;  (efs/org-font-setup)
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (shell . t)))
    (setq org-confirm-babel-evaluate nil)
    (setq org-capture-templates nil)
  )
#+end_src

#+RESULTS:


#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

#+begin_src emacs-lisp
(use-package org-download
  :init
  (with-eval-after-load 'org
    (org-download-enable))
)
#+end_src

#+RESULTS:
* IDE
** Shells
#+begin_src emacs-lisp
  (use-package term
    :straight t
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src  
#+RESULTS:
: t
** Templates
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (shell-mode . yas-minor-mode)
    :init
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets") ;; personal snippets
          )
    :config
    (yas-reload-all)
    )

  (use-package ivy-yasnippet)

  (use-package auto-yasnippet)

#+end_src

#+RESULTS:

** In-buffer Completion

#+begin_src emacs-lisp
      (use-package corfu

      ;; Optional customizations
        :custom
        (corfu-cycle t)                ;; Enable cycling for`corfu-next/previous'
        (corfu-auto t)			  ;; Enable auto completion
        (corfu-separator ?\s)          ;; Orderless field separator
        (corfu-quit-at-boundary 'separator)   ;; Never quit at completion boundary
        (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
        (corfu-preview-current 'insert)    ;; Disable current candidate preview
        (corfu-auto-prefix 2)
        (corfu-auto-delay 0.0)

        :init
        (global-corfu-mode)
      ;; You may want to enable Corfu only for certain modes.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.
      ;; This is recommended since dabbrev can be used globally (M-/).
      )

    ;; Use dabbrev with Corfu!
    (use-package dabbrev
      :straight t
      ;; Swap M-/ and C-M-/
      :bind (("M-/" . dabbrev-completion)
             ("C-M-/" . dabbrev-expand)))


        ;; Add extensions
      (use-package cape
        ;; Bind dedicated completion commands
        ;; Alternative prefix keys: C-c p, M-p, M-+, ...
        :init
        ;; Add `completion-at-point-functions', used by `completion-at-point'.
        (defun cape-dabbrev-codium ()
  	(cape-wrap-super #'cape-dabbrev #'codeium-completion-at-point)
  	)
        (add-to-list 'completion-at-point-functions #'cape-dabbrev-codium)

      )

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
    (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
    (kind-icon-blend-frac 0.08)

    ;; NOTE 2022-02-05: `kind-icon' depends `svg-lib' which creates a cache
    ;; directory that defaults to the `user-emacs-directory'. Here, I change that
    ;; directory to a location appropriate to `no-littering' conventions, a
    ;; package which moves directories of other packages to sane locations.
    (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/")) ; Change cache dir
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

    ;; Add hook to reset cache so the icon colors match my theme
    ;; NOTE 2022-02-05: This is a hook which resets the cache whenever I switch
    ;; the theme using my custom defined command for switching themes. If I don't
    ;; do this, then the backgound color will remain the same, meaning it will not
    ;; match the background color corresponding to the current theme. Important
    ;; since I have a light theme and dark theme I switch between. This has no
    ;; function unless you use something similar
    (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache))))

#+end_src

#+RESULTS:
| corfu-doc-mode | corfu-mode-set-explicitly |
** Syntax Checking
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook
    (lsp-mode . flycheck-mode)
    (elpy-mode . flycheck-mode)
    )
#+end_src

#+RESULTS:
| flycheck-mode |
** LSP

#+begin_src emacs-lisp
    (defun my/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(flex))) ;; Configure flex

    (use-package lsp-mode
      :custom
      (lsp-completion-provider :none) ;; we use Corfu!
      :commands (lsp lsp-deferred)
      :hook
      (lsp-mode . my/lsp-mode-setup)
      (lsp-completion-mode . my/lsp-mode-setup-completion)
      :init
      (setq lsp-keymap-prefix "C-c l")
      (add-to-list 'exec-path "/home/juanpablo/miniconda3/bin")
      :config
      (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom)
      (lsp-ui-imenu-buffer-position 'left)
      )


    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy)

    (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)

    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed
    )
    ;; ;; Bind `C-c l d` to `dap-hydra` for easy access
    ;; (general-define-key
    ;;   :keymaps 'lsp-mode-map
    ;;   :prefix lsp-keymap-prefix
    ;;   "d" '(dap-hydra t :wk "debugger")))

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

#+RESULTS:
: evilnc-comment-or-uncomment-lines

** Python

#+begin_src emacs-lisp
  (use-package python-mode
    :straight t
    :hook (python-mode . lsp-deferred)
    :custom
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  (use-package sphinx-doc
    :hook (python-mode . sphinx-doc-mode)
    )
#+end_src

#+RESULTS:
| sphinx-doc-mode | code-cells-mode-maybe | lsp-deferred | er/add-python-mode-expansions | doom-modeline-env-setup-python |
** Jupyter
#+begin_src emacs-lisp
  (use-package code-cells
    :init
    (add-hook 'python-mode-hook 'code-cells-mode-maybe)
    :config
    (with-eval-after-load 'code-cells
      (let ((map code-cells-mode-map))
        (define-key map (kbd "C-c j e") 'code-cells-eval)
        (define-key map (kbd "C-c j b") 'code-cells-backward-cell)
        (define-key map (kbd "C-c j f") 'code-cells-forward-cell)
        (define-key map (kbd "C-c j B") 'code-cells-move-cell-up)
        (define-key map (kbd "C-c j F") 'code-cells-move-cell-down)
        (define-key map (kbd "C-c j ;") 'code-cells-comment-or-uncomment)
        (define-key map (kbd "C-c j @") 'code-cells-mark-cell)

        ;; Overriding other minor mode bindings requires some insistence...
        (define-key map [remap jupyter-eval-line-or-region] 'code-cells-eval)))
    )
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
  (use-package jupyter)

  (use-package pyvenv)
#+end_src

#+RESULTS:

** GPTs
#+begin_src emacs-lisp
  (use-package elysium
    :straight (elysium
      	     :type git
      	     :host github
      	     :repo "lanceberge/elysium"
      	     )
    :custom
    ;; Below are the default values
    (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
    (elysium-window-style 'vertical)) ; Can be customized to horizontal

  (defun get-authinfo-password (machine)
    "Read the contents of FILE-PATH and return it as a string."
    (let ((auth-info (auth-source-search :host machine)))
      (if auth-info
      	(let ((secret (plist-get (car auth-info) :secret)))
      	  (if (functionp secret)
      	      (funcall secret)
              secret)
      	  )
        (message "No matching auth info found."))))
  (defun gptel-api-key ()
    (get-authinfo-password "anthropic.com"))

  (use-package gptel
    :custom
    (gptel-model "claude-3-5-sonnet-20240620")
    :config
    (setq
     gptel-backend (gptel-make-anthropic "Claude"
                     :stream t
                     :key #'gptel-api-key
      		   ))
    )

  (use-package smerge-mode
    :ensure nil
    :hook
    (prog-mode . smerge-mode))
  (use-package codeium

    :straight '(:type git :host github :repo "Exafunction/codeium.el")
    )

  (use-package aider
    :straight (:host github :repo "tninja/aider.el" :files ("aider.el"))
    :config
    ;; Use claude-3-5-sonnet cause it is best in aider benchmark 
    (setq aider-args '("--model" "anthropic/claude-3-5-sonnet-20241022"))
    ;;(setenv "ANTHROPIC_API_KEY" gptel-api-key)
    (global-set-key (kbd "C-c a") 'aider-transient-menu))
#+end_src


* Writing
** Mail
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

(use-package mu4e
  :ensure nil
  :config
  (setq mu4e-contexts
      (list
       ;; Work account
       (make-mu4e-context
        :name "Kwali"
        :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
        :vars '((user-mail-address . "juanpablo@kwali.ai")
                (user-full-name    . "Juan Pablo Morales")
                (smtpmail-smtp-server  . "smtp.gmail.com")
                (smtpmail-smtp-service . 465)
                (smtpmail-stream-type  . ssl)
                (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
                (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))))

  (setq message-send-mail-function 'smtpmail-send-it)
)


#+end_src

#+RESULTS:
: t

** Atomic Emacs
#+begin_src emacs-lisp
(use-package atomic-chrome
  
  :config
  (atomic-chrome-start-server)
  (setq atomic-chrome-buffer-open-style 'frame)
  (setq atomic-chrome-default-major-mode 'python-mode)
  (setq atomic-chrome-url-major-mode-alist
	'(("redmine" . textile-mode)))
)
#+end_src

#+RESULTS:
: t
** Org Tree Slide
#+begin_src emacs-lisp
  (use-package hide-lines)

  (defun my/hide-headers ()
    ;; hide block begin/end markers
    ;; not sure why but hide-lines *really* needs
    ;; loaded each time we call this..
    (load-library "hide-lines")
    (hide-lines-matching
     "#\\+\\(BEGIN\\|END\\)_\\(SRC\\|EXAMPLE\\|VERSE\\|QUOTE\\)")
    (hide-lines-matching
     "#\\+ATTR_ORG"))

  (defun my/show-headers ()
    (hide-lines-show-all)
    (org-show-all))

  (use-package  command-log-mode
    :straight t)


  (use-package org-tree-slide
    :custom
    (org-image-actual-width nil)
    (org-tree-slide-header nil)
    (org-tree-slide-heading-emphasis t)
    ;:hook ((org-tree-slide-play . my:hide-headers)
    ;(org-tree-slide-stop . my:show-headers))
    )
#+end_src

#+RESULTS:
** Ox-hugo
#+BEGIN_SRC emacs-lisp :results silent
(use-package ox-hugo
  :after ox)
#+END_SRC

#+RESULTS:
: org-define-error
#+begin_src emacs-lisp :tangle no
(use-package edit-server
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))
#+end_src

#+RESULTS:
: t
* Great Packages
** Magit
#+begin_src emacs-lisp
       (use-package magit)
#+end_src

#+RESULTS:
: t

** Restclient

#+begin_src emacs-lisp
      (use-package restclient
        :mode (("\\.http\\'" . restclient-mode))
        )
#+end_src

#+RESULTS:

** Elfeed

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq elfeed-feeds
      '("https://planet.emacslife.com/atom.xml")
      )
    )

#+end_src

#+RESULTS:

** IRC

#+begin_src emacs-lisp
  (use-package erc
    :straight t
    :custom
    (erc-server "irc.libera.chat")
    (erc-nick "juanpamf")
    (erc-user-full-name "Juan Pablo Morales")
    (erc-track-shorten-start 8)
    (erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs")))
    (erc-kill-buffer-on-part t)
    (erc-auto-query 'bury))


#+end_src
